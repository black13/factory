// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "factory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace factory {

namespace {

const ::google::protobuf::Descriptor* child1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  child1_reflection_ = NULL;
const ::google::protobuf::Descriptor* child2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  child2_reflection_ = NULL;
const ::google::protobuf::Descriptor* child3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  child3_reflection_ = NULL;
const ::google::protobuf::Descriptor* doc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  doc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_factory_2eproto() {
  protobuf_AddDesc_factory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "factory.proto");
  GOOGLE_CHECK(file != NULL);
  child1_descriptor_ = file->message_type(0);
  static const int child1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child1, name_),
  };
  child1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      child1_descriptor_,
      child1::default_instance_,
      child1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(child1));
  child2_descriptor_ = file->message_type(1);
  static const int child2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child2, name_),
  };
  child2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      child2_descriptor_,
      child2::default_instance_,
      child2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(child2));
  child3_descriptor_ = file->message_type(2);
  static const int child3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child3, name_),
  };
  child3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      child3_descriptor_,
      child3::default_instance_,
      child3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(child3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(child3));
  doc_descriptor_ = file->message_type(3);
  static const int doc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc, children1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc, children2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc, children3_),
  };
  doc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      doc_descriptor_,
      doc::default_instance_,
      doc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(doc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(doc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_factory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    child1_descriptor_, &child1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    child2_descriptor_, &child2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    child3_descriptor_, &child3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    doc_descriptor_, &doc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_factory_2eproto() {
  delete child1::default_instance_;
  delete child1_reflection_;
  delete child2::default_instance_;
  delete child2_reflection_;
  delete child3::default_instance_;
  delete child3_reflection_;
  delete doc::default_instance_;
  delete doc_reflection_;
}

void protobuf_AddDesc_factory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfactory.proto\022\007factory\"\026\n\006child1\022\014\n\004na"
    "me\030\001 \002(\t\"\026\n\006child2\022\014\n\004name\030\001 \002(\t\"\026\n\006chil"
    "d3\022\014\n\004name\030\001 \002(\t\"q\n\003doc\022\"\n\tchildren1\030\001 \003"
    "(\0132\017.factory.child1\022\"\n\tchildren2\030\002 \003(\0132\017"
    ".factory.child2\022\"\n\tchildren3\030\003 \003(\0132\017.fac"
    "tory.child3", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "factory.proto", &protobuf_RegisterTypes);
  child1::default_instance_ = new child1();
  child2::default_instance_ = new child2();
  child3::default_instance_ = new child3();
  doc::default_instance_ = new doc();
  child1::default_instance_->InitAsDefaultInstance();
  child2::default_instance_->InitAsDefaultInstance();
  child3::default_instance_->InitAsDefaultInstance();
  doc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_factory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_factory_2eproto {
  StaticDescriptorInitializer_factory_2eproto() {
    protobuf_AddDesc_factory_2eproto();
  }
} static_descriptor_initializer_factory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int child1::kNameFieldNumber;
#endif  // !_MSC_VER

child1::child1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:factory.child1)
}

void child1::InitAsDefaultInstance() {
}

child1::child1(const child1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:factory.child1)
}

void child1::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

child1::~child1() {
  // @@protoc_insertion_point(destructor:factory.child1)
  SharedDtor();
}

void child1::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void child1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* child1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return child1_descriptor_;
}

const child1& child1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factory_2eproto();
  return *default_instance_;
}

child1* child1::default_instance_ = NULL;

child1* child1::New() const {
  return new child1;
}

void child1::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool child1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:factory.child1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:factory.child1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:factory.child1)
  return false;
#undef DO_
}

void child1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:factory.child1)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:factory.child1)
}

::google::protobuf::uint8* child1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:factory.child1)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:factory.child1)
  return target;
}

int child1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void child1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const child1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const child1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void child1::MergeFrom(const child1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void child1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void child1::CopyFrom(const child1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool child1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void child1::Swap(child1* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata child1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = child1_descriptor_;
  metadata.reflection = child1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int child2::kNameFieldNumber;
#endif  // !_MSC_VER

child2::child2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:factory.child2)
}

void child2::InitAsDefaultInstance() {
}

child2::child2(const child2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:factory.child2)
}

void child2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

child2::~child2() {
  // @@protoc_insertion_point(destructor:factory.child2)
  SharedDtor();
}

void child2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void child2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* child2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return child2_descriptor_;
}

const child2& child2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factory_2eproto();
  return *default_instance_;
}

child2* child2::default_instance_ = NULL;

child2* child2::New() const {
  return new child2;
}

void child2::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool child2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:factory.child2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:factory.child2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:factory.child2)
  return false;
#undef DO_
}

void child2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:factory.child2)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:factory.child2)
}

::google::protobuf::uint8* child2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:factory.child2)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:factory.child2)
  return target;
}

int child2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void child2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const child2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const child2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void child2::MergeFrom(const child2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void child2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void child2::CopyFrom(const child2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool child2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void child2::Swap(child2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata child2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = child2_descriptor_;
  metadata.reflection = child2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int child3::kNameFieldNumber;
#endif  // !_MSC_VER

child3::child3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:factory.child3)
}

void child3::InitAsDefaultInstance() {
}

child3::child3(const child3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:factory.child3)
}

void child3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

child3::~child3() {
  // @@protoc_insertion_point(destructor:factory.child3)
  SharedDtor();
}

void child3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void child3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* child3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return child3_descriptor_;
}

const child3& child3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factory_2eproto();
  return *default_instance_;
}

child3* child3::default_instance_ = NULL;

child3* child3::New() const {
  return new child3;
}

void child3::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool child3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:factory.child3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:factory.child3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:factory.child3)
  return false;
#undef DO_
}

void child3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:factory.child3)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:factory.child3)
}

::google::protobuf::uint8* child3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:factory.child3)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:factory.child3)
  return target;
}

int child3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void child3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const child3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const child3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void child3::MergeFrom(const child3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void child3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void child3::CopyFrom(const child3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool child3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void child3::Swap(child3* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata child3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = child3_descriptor_;
  metadata.reflection = child3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int doc::kChildren1FieldNumber;
const int doc::kChildren2FieldNumber;
const int doc::kChildren3FieldNumber;
#endif  // !_MSC_VER

doc::doc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:factory.doc)
}

void doc::InitAsDefaultInstance() {
}

doc::doc(const doc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:factory.doc)
}

void doc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

doc::~doc() {
  // @@protoc_insertion_point(destructor:factory.doc)
  SharedDtor();
}

void doc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void doc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* doc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return doc_descriptor_;
}

const doc& doc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factory_2eproto();
  return *default_instance_;
}

doc* doc::default_instance_ = NULL;

doc* doc::New() const {
  return new doc;
}

void doc::Clear() {
  children1_.Clear();
  children2_.Clear();
  children3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool doc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:factory.doc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .factory.child1 children1 = 1;
      case 1: {
        if (tag == 10) {
         parse_children1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_children1;
        if (input->ExpectTag(18)) goto parse_children2;
        break;
      }

      // repeated .factory.child2 children2 = 2;
      case 2: {
        if (tag == 18) {
         parse_children2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_children2;
        if (input->ExpectTag(26)) goto parse_children3;
        break;
      }

      // repeated .factory.child3 children3 = 3;
      case 3: {
        if (tag == 26) {
         parse_children3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_children3;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:factory.doc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:factory.doc)
  return false;
#undef DO_
}

void doc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:factory.doc)
  // repeated .factory.child1 children1 = 1;
  for (int i = 0; i < this->children1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children1(i), output);
  }

  // repeated .factory.child2 children2 = 2;
  for (int i = 0; i < this->children2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children2(i), output);
  }

  // repeated .factory.child3 children3 = 3;
  for (int i = 0; i < this->children3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:factory.doc)
}

::google::protobuf::uint8* doc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:factory.doc)
  // repeated .factory.child1 children1 = 1;
  for (int i = 0; i < this->children1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->children1(i), target);
  }

  // repeated .factory.child2 children2 = 2;
  for (int i = 0; i < this->children2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children2(i), target);
  }

  // repeated .factory.child3 children3 = 3;
  for (int i = 0; i < this->children3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:factory.doc)
  return target;
}

int doc::ByteSize() const {
  int total_size = 0;

  // repeated .factory.child1 children1 = 1;
  total_size += 1 * this->children1_size();
  for (int i = 0; i < this->children1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children1(i));
  }

  // repeated .factory.child2 children2 = 2;
  total_size += 1 * this->children2_size();
  for (int i = 0; i < this->children2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children2(i));
  }

  // repeated .factory.child3 children3 = 3;
  total_size += 1 * this->children3_size();
  for (int i = 0; i < this->children3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void doc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const doc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const doc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void doc::MergeFrom(const doc& from) {
  GOOGLE_CHECK_NE(&from, this);
  children1_.MergeFrom(from.children1_);
  children2_.MergeFrom(from.children2_);
  children3_.MergeFrom(from.children3_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void doc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void doc::CopyFrom(const doc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool doc::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->children1())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->children2())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->children3())) return false;
  return true;
}

void doc::Swap(doc* other) {
  if (other != this) {
    children1_.Swap(&other->children1_);
    children2_.Swap(&other->children2_);
    children3_.Swap(&other->children3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata doc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = doc_descriptor_;
  metadata.reflection = doc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace factory

// @@protoc_insertion_point(global_scope)
